{
  @abstract(@name contains the main form of Help Generator
  and a class for saving and restoring project settings.)
  @author(Richard B. Winston <rbwinst@usgs.gov>)
  @created(2004-11-28)
  @lastmod(2005-5-16)

  @name contains the main form of Help Generator.  It also defines
  @link(THelpGeneratorProjectOptions) which is used to save project options
  to a file and restore them again.

This file is made available by the
U.S. Geological Survey (USGS) to be used in the public interest and the
advancement of science.  You may, without any fee or cost, use, copy,
modify, or distribute this file, and any derivative works thereof,
and its supporting documentation, subject to the following restrictions
and understandings.

If you distribute copies or modifications of this file and related
material, make sure the recipients receive a copy of this notice and receive
or can get a copy of the original distribution.  If the software and (or)
related material are modified and distributed, it must be made clear that the
recipients do not have the original and are informed of the extent of the
modifications.  For example, modified files must include a prominent notice
stating the modifications, author, and date.  This restriction is necessary to
guard against problems introduced in the software by others, reflecting
negatively on the reputation of the USGS.

This file is public property.

You may charge fees for distribution, warranties, and services provided in
connection with this file or derivative works thereof.  The name USGS can
be used in any advertising or publicity to endorse or promote any products or
commercial entity using this software if specific written permission is
obtained from the USGS.

The user agrees to appropriately acknowledge the authors and the USGS in
publications that result from the use of this file or in products that
include this file in whole or in part.

Because the software and related material is free (other than nominal
materials and handling fees) and provided "as is", the authors, USGS, or the
United States Government have made no warranty, expressed or implied, as to
the accuracy or completeness and are not obligated to provide the user with
any support, consulting, training or assistance of any kind with regard to the
use, operation, and performance of this software nor to provide the user with
any updates, revisions, new versions or "bug fixes".

The user assumes all risk for any damages whatsoever resulting from loss of
use, data, or profits arising in connection with the access, use, quality, or
performance of this software.
}
unit frmHelpGeneratorVCL_Unit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, PasDoc_Gen, PasDoc_GenHtml, PasDoc_Base, StdCtrls, PasDoc_Types,
  ExtCtrls, CheckLst, OleCtrls, SHDocVw, ComCtrls, PasDoc_Languages, Menus,
  Buttons, Spin, PasDoc_GenLatex, PasDoc_GenHtmlHelp, CustomProjectOptions,
  ConsolProjectOptionsUnit;

type
  // @abstract(TfrmHelpGenerator is the class of the main form of Help
  // Generator.) Its published fields are mainly components that are used to
  // save the project settings.
  TfrmHelpGenerator = class(TForm)
    // @name is the main workhorse of @classname.  It analyzes the source
    // code and cooperates with @link(HtmlDocGenerator)
    // and @link(TexDocGenerator) to create the output.
    PasDoc1: TPasDoc;
    // @name generates HTML output.
    HtmlDocGenerator: THTMLDocGenerator;
    OpenDialog1: TOpenDialog;
    pcMain: TPageControl;
    tabGenerate: TTabSheet;
    // memoMessages displays compiler warnings.  See also @link(seVerbosity);
    memoMessages: TMemo;
    tabOptions: TTabSheet;
    // @name controls whether of private, protected, public, published and
    // automated properties, methods, events, and fields will be included in
    // generated output.
    clbMethodVisibility: TCheckListBox;
    Label1: TLabel;
    // @name is used to set the language in which the web page will
    // be written.  Of course, this only affects tha language for the text
    // generated by the program, not the comments about the program.
    comboLanguages: TComboBox;
    Label2: TLabel;
    tabSourceFiles: TTabSheet;
    // @name holds the complete paths of all the source files
    // in the project.
    memoFiles: TMemo;
    Panel3: TPanel;
    // Click @name to select one or more sorce files for the
    // project.
    btnBrowseSourceFiles: TButton;
    // @name has the path of the directory where the web files will
    // be created.
    edOutput: TEdit;
    Label3: TLabel;
    Panel1: TPanel;
    btnGenerate: TButton;
    tabIncludeDirectories: TTabSheet;
    // The lines in @name are the paths of the files that
    // may have include files that are part of the project.
    memoIncludeDirectories: TMemo;
    Panel2: TPanel;
    // Click @name  to select a directory that may
    // have include directories.
    btnBrowseIncludeDirectory: TButton;
    // Click @name to select the directory in whick the
    // output files will be created.
    btnBrowseOutputDirectory: TButton;
    Label6: TLabel;
    // @name is used to set the name of the project.
    edProjectName: TEdit;
    SaveDialog1: TSaveDialog;
    OpenDialog2: TOpenDialog;
    MainMenu: TMainMenu;
    miFile: TMenuItem;
    Open1: TMenuItem;
    Save1: TMenuItem;
    Exit1: TMenuItem;
    Panel4: TPanel;
    // @name controls the severity of the messages that are displayed.
    seVerbosity: TSpinEdit;
    Label7: TLabel;
    Panel5: TPanel;
    Label8: TLabel;
    Panel6: TPanel;
    Label9: TLabel;
    Panel7: TPanel;
    Label10: TLabel;
    // @name determines what sort of files will be created
    comboGenerateFormat: TComboBox;
    Label11: TLabel;
    New1: TMenuItem;
    // @name generates Latex output.
    TexDocGenerator: TTexDocGenerator;
    tabDefines: TTabSheet;
    memoDefines: TMemo;
    About1: TMenuItem;
    // @name generates HTML-help project output.
    HTMLHelpDocGenerator: THTMLHelpDocGenerator;
    edIntroduction: TEdit;
    Label13: TLabel;
    btnIntroduction: TButton;
    edConclusion: TEdit;
    Label14: TLabel;
    btnConclusion: TButton;
    odExtraFiles: TOpenDialog;
    tabMoreOptions: TTabSheet;
    cbUseGraphVizClasses: TCheckBox;
    cbUseGraphVizUses: TCheckBox;
    edGraphVizDotLocation: TEdit;
    btnVizGraph: TButton;
    Label15: TLabel;
    odDotLocation: TOpenDialog;
    memoHyphenatedWords: TMemo;
    Label16: TLabel;
    rgLineBreakQuality: TRadioGroup;
    Label4: TLabel;
    memoHeader: TMemo;
    memoFooter: TMemo;
    Label5: TLabel;
    Label17: TLabel;
    edTitle: TEdit;
    miHelp: TMenuItem;
    Help2: TMenuItem;
    Label18: TLabel;
    comboLatexGraphics: TComboBox;
    Label12: TLabel;

    tabWebPage: TTabSheet;
    WebBrowser1: TWebBrowser;
    sbBack: TSpeedButton;
    sbForward: TSpeedButton;
    lblURL: TLabel;
    Panel8: TPanel;
    edBrowser: TEdit;
    Button1: TButton;
    BrowserDialog: TOpenDialog;
    Label19: TLabel;
    procedure PasDoc1Warning(const MessageType: TMessageType;
      const AMessage: string; const AVerbosity: Cardinal);
    procedure btnBrowseSourceFilesClick(Sender: TObject);
    procedure clbMethodVisibilityClickCheck(Sender: TObject);
    procedure FormCreate(Sender: TObject);

    procedure btnGenerateClick(Sender: TObject);
    procedure comboLanguagesChange(Sender: TObject);
    procedure btnBrowseIncludeDirectoryClick(Sender: TObject);
    procedure btnBrowseOutputDirectoryClick(Sender: TObject);
    procedure Open1Click(Sender: TObject);
    procedure Save1Click(Sender: TObject);
    procedure Exit1Click(Sender: TObject);
    procedure edProjectNameChange(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure New1Click(Sender: TObject);
    procedure comboGenerateFormatChange(Sender: TObject);
    procedure About1Click(Sender: TObject);
    procedure btnIntroductionClick(Sender: TObject);
    procedure btnConclusionClick(Sender: TObject);
    procedure btnVizGraphClick(Sender: TObject);
    procedure cbUseGraphVizClick(Sender: TObject);
    procedure edGraphVizDotLocationChange(Sender: TObject);
    procedure Help2Click(Sender: TObject);
    procedure pcMainChange(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure pcMainChanging(Sender: TObject; var AllowChange: Boolean);

    procedure WebBrowser1NavigateComplete2(Sender: TObject;
      const pDisp: IDispatch; var URL: OleVariant);
    procedure sbForwardClick(Sender: TObject);
    procedure sbBackClick(Sender: TObject);
    procedure WebBrowser1CommandStateChange(Sender: TObject;
      Command: Integer; Enable: WordBool);
    procedure Button1Click(Sender: TObject);
  private
    // @name is @true when the user has changed the project settings.
    // Otherwise it is @false.
    Changed: boolean;
    DefaultDirectives: TStringList;
    procedure SaveChanges(var Action: TCloseAction);
    procedure SetDefaults;
    procedure SetEdVizGraphDotLocationColor;
    function SaveIt: boolean;
    procedure ShowTextMessage(const AString: string);
    { Private declarations }
  public
    { Public declarations }
  end;

  {@abstract(@classname is used to store and retrieve the settings
  of a project.)
  Each published property reads or writes a
  property of @link(frmHelpGenerator).
  It also inherits methods for running the TPasDoc component.}
  THelpGeneratorProjectOptions = class(TCustomHelpProjectOptions)
  protected
    function GetChanged: boolean; override;
    function GetConclusion: string; override;
    function GetDirectives: TSTrings; override;
    function GetFooter: TStrings; override;
    function GetGraphVizDotLocation: string; override;
    function GetHeader: TStrings; override;
    function GetHtmlDocGeneratorComponent: THtmlDocGenerator; override;
    function GetHTMLHelpDocGeneratorComponent: THTMLHelpDocGenerator;
      override;
    function GetHyphenatedWords: TStrings; override;
    function GetIncludeAutomated: boolean; override;
    function GetIncludeDirectories: TStrings; override;
    function GetIncludeImplicit: boolean; override;
    function GetIncludePrivate: boolean; override;
    function GetIncludeProtected: boolean; override;
    function GetIncludePublic: boolean; override;
    function GetIncludePublished: boolean; override;
    function GetIntroduction: string; override;
    function GetLanguage: TLanguageID; override;
    function GetLatexGraphicsPackage: TLatexGraphicsPackage; override;
    function GetLineBreakQuality: TLineBreakQuality; override;
    function GetOutputDirectory: string; override;
    function GetOutputType: TOutputType; override;
    function GetPasDocComponent: TPasDoc; override;
    function GetProjectName: string; override;
    function GetSourceFiles: TStrings; override;
    function GetTexDocGeneratorComponent: TTexDocGenerator; override;
    function GetTitle: string; override;
    function GetUseGraphVizClasses: boolean; override;
    function GetUseGraphVizUses: boolean; override;
    function GetVerbosity: integer; override;
    procedure SetChanged(const Value: boolean); override;
    procedure SetConclusion(const Value: string); override;
    procedure SetDefaultActivePage; override;
    procedure SetDirectives(const Value: TSTrings); override;
    procedure SetFooter(const Value: TStrings); override;
    procedure SetGraphVizDotLocation(const Value: string); override;
    procedure SetHeader(const Value: TStrings); override;
    procedure SetHyphenatedWords(const Value: TStrings); override;
    procedure SetIncludeAutomated(const Value: boolean); override;
    procedure SetIncludeDirectories(const Value: TStrings); override;
    procedure SetIncludeImplicit(const Value: boolean); override;
    procedure SetIncludePrivate(const Value: boolean); override;
    procedure SetIncludeProtected(const Value: boolean); override;
    procedure SetIncludePublic(const Value: boolean); override;
    procedure SetIncludePublished(const Value: boolean); override;
    procedure SetIntroduction(const Value: string); override;
    procedure SetLanguage(const Value: TLanguageID); override;
    procedure SetLatexGraphicsPackage(const Value: TLatexGraphicsPackage);
      override;
    procedure SetLineBreakQuality(const Value: TLineBreakQuality); override;
    procedure SetOutputDirectory(const Value: string); override;
    procedure SetOutputType(const Value: TOutputType); override;
    procedure SetProjectName(const Value: string); override;
    procedure SetSourceFiles(const Value: TStrings); override;
    procedure SetTitle(const Value: string); override;
    procedure SetUseGraphVizClasses(const Value: boolean); override;
    procedure SetUseGraphVizUses(const Value: boolean); override;
    procedure SetVerbosity(const Value: integer); override;
    function GetIncludeStrictPrivate: boolean; override;
    function GetIncludeStrictProtected: boolean; override;
    procedure SetIncludeStrictPrivate(const Value: boolean); override;
    procedure SetIncludeStrictProtected(const Value: boolean); override;
  end;

  // @name saves the location of the VizGraph dot program.
  T_VCL_Ini = class(TCustomIniFile)
  private
    FPasDocConsoleLocation: string;
  protected
    function GetGraphVizDotLocation: string; override;
    procedure SetGraphVizDotLocation(const Value: string); override;
    function GetBrowserLocation: string; override;
    procedure SetBrowserLocation(const Value: string); override;
    function GetPasDocConsoleLocation: string; override;
    procedure SetPasDocConsoleLocation(const Value: string); override;
  end;

var
  // @name is the main form of Help Generator
  frmHelpGenerator: TfrmHelpGenerator;

implementation

{$R *.dfm}

uses FileCtrl, PasDoc_Items, frmAboutVCL_Unit;

procedure TfrmHelpGenerator.PasDoc1Warning(const MessageType: TMessageType;
  const AMessage: string; const AVerbosity: Cardinal);
begin
  memoMessages.Lines.Add(AMessage);
  Application.ProcessMessages;
end;

procedure TfrmHelpGenerator.btnBrowseSourceFilesClick(Sender: TObject);
var
  Directory: string;
  FileIndex: integer;
  Files: TStringList;
begin
  if OpenDialog1.Execute then
  begin
    Files := TStringList.Create;
    try
      if edOutput.Text = '' then
      begin
        edOutput.Text := ExtractFileDir(OpenDialog1.FileName);
      end;

      Files.Sorted := True;
      Files.Duplicates := dupIgnore;

      Files.AddStrings(memoFiles.Lines);
      Files.AddStrings(OpenDialog1.Files);

      memoFiles.Lines := Files;

      for FileIndex := 0 to OpenDialog1.Files.Count - 1 do
      begin
        Directory := ExtractFileDir(OpenDialog1.Files[FileIndex]);
        if memoIncludeDirectories.Lines.IndexOf(Directory) < 0 then
        begin
          memoIncludeDirectories.Lines.Add(Directory);
        end;
      end;
    finally
      Files.Free;
    end;
  end;
end;

procedure TfrmHelpGenerator.clbMethodVisibilityClickCheck(Sender: TObject);
begin
  Changed := True;
end;

procedure TfrmHelpGenerator.SetDefaults;
var
  ProjectOptions: THelpGeneratorProjectOptions;
begin
  ProjectOptions := THelpGeneratorProjectOptions.Create(nil);
  try
    ProjectOptions.SetDefaults;
  finally
    ProjectOptions.Free;
  end;
end;

procedure TfrmHelpGenerator.FormCreate(Sender: TObject);
var
  LanguageIndex: TLanguageID;
begin
  ReadIniFile(T_VCL_Ini);

  THelpGeneratorProjectOptions.DefaultDefines(memoDefines.Lines);

  comboLanguages.Items.Capacity :=
    Ord(High(LanguageIndex)) - Ord(Low(TLanguageID)) + 1;
  for LanguageIndex := Low(TLanguageID) to High(LanguageIndex) do
  begin
    comboLanguages.Items.Add(LANGUAGE_ARRAY[LanguageIndex].Name);
  end;

  GetVisibilityNames(clbMethodVisibility.Items);

  Constraints.MinWidth := Width;
  Constraints.MinHeight := Height;

  DefaultDirectives := TStringList.Create;
  DefaultDirectives.Assign(memoDefines.Lines);

  SetDefaults;
end;

procedure TfrmHelpGenerator.comboLanguagesChange(Sender: TObject);
begin
  Changed := True;
end;

procedure TfrmHelpGenerator.btnGenerateClick(Sender: TObject);
var
  Settings: THelpGeneratorProjectOptions;
begin
  if (cbUseGraphVizUses.Checked or cbUseGraphVizClasses.Checked)
    and not FileExists(edGraphVizDotLocation.Text) then
  begin
    if MessageDlg('The location of the VizGraph "dot" program was not'
      + ' found.  Do you want to continue?',
      Dialogs.mtWarning, [mbYes, mbNo], 0)
      <> mrYes then
    begin
      Exit;
    end;
  end;

  Screen.Cursor := crHourGlass;
  btnGenerate.Enabled := False;
  miFile.Enabled := False;
  miHelp.Enabled := False;

  try
    memoMessages.Clear;

    Settings := THelpGeneratorProjectOptions.Create(nil);
    try
      Settings.RunPasDoc;
      Settings.RunVizGraph(ShowTextMessage);
    finally
      Settings.Free;
    end;

    if comboGenerateFormat.ItemIndex in [0, 1] then
    begin
      WebBrowser1.Navigate(PasDoc1.Generator.DestinationDirectory +
        'index.html');
      pcMain.ActivePage := tabWebPage;
    end;

  finally
    Screen.Cursor := crDefault;
    btnGenerate.Enabled := True;
    miFile.Enabled := True;
    miHelp.Enabled := True;
  end;

end;

procedure TfrmHelpGenerator.btnBrowseIncludeDirectoryClick(Sender: TObject);
var
  directory: string;
begin
  if memoIncludeDirectories.Lines.Count > 0 then
  begin
    directory := memoIncludeDirectories.Lines[
      memoIncludeDirectories.Lines.Count - 1];
  end
  else
  begin
    directory := '';
  end;

  // directory is an var variable so it shoulod be
  // specified before calling SelectDirectory.
  if SelectDirectory(directory, [sdAllowCreate, sdPerformCreate, sdPrompt], 0)
    then
  begin
    if memoIncludeDirectories.Lines.IndexOf(directory) < 0 then
    begin
      memoIncludeDirectories.Lines.Add(directory);
    end
    else
    begin
      MessageDlg('The directory you selected, (' + directory
        + ') is already included.', Dialogs.mtInformation, [mbOK], 0);
    end;
  end;
end;

procedure TfrmHelpGenerator.btnBrowseOutputDirectoryClick(Sender: TObject);
var
  directory: string;
begin
  directory := edOutput.Text;
  // directory is an var variable so it shoulod be
  // specified before calling SelectDirectory.
  if SelectDirectory(directory, [sdAllowCreate, sdPerformCreate, sdPrompt], 0)
    then
  begin
    edOutput.Text := directory;
    Changed := True;
  end;
end;

procedure TfrmHelpGenerator.Open1Click(Sender: TObject);
var
  Settings: THelpGeneratorProjectOptions;
  Action: TCloseAction;
begin
  if Changed then
  begin
    Action := caFree;
    SaveChanges(Action);
    if Action = caNone then
    begin
      Exit;
    end;
  end;

  if OpenDialog2.Execute then
  begin
    SaveDialog1.FileName := OpenDialog2.FileName;
    Settings := THelpGeneratorProjectOptions.Create(nil);
    try
      Settings.ReadFromComponentFile(OpenDialog2.FileName);
      Caption := ExtractFileName(OpenDialog2.FileName) + ': Help Generator';
    finally
      Settings.Free;
    end;
    Changed := False;
  end;
end;

function TfrmHelpGenerator.SaveIt: boolean;
var
  Settings: THelpGeneratorProjectOptions;
begin
  result := SaveDialog1.Execute;
  if result then
  begin
    Settings := THelpGeneratorProjectOptions.Create(nil);
    try
      Settings.SaveToComponentFile(SaveDialog1.FileName);
    finally
      Settings.Free;
    end;
    Changed := False;
  end;
end;

procedure TfrmHelpGenerator.Exit1Click(Sender: TObject);
begin
  Close;
end;

procedure TfrmHelpGenerator.edProjectNameChange(Sender: TObject);
begin
  Changed := True;
end;

procedure TfrmHelpGenerator.SaveChanges(var Action: TCloseAction);
var
  MessageResult: integer;
begin
  if Changed then
  begin
    MessageResult := MessageDlg(
      'Do you want to save the settings for this project?',
      Dialogs.mtInformation, [mbYes, mbNo, mbCancel], 0);
    case MessageResult of
      mrYes:
        begin
          if not SaveIt then
          begin
            Action := caNone;
          end;
        end;
      mrNo:
        begin
          // do nothing.
        end;
    else
      begin
        Action := caNone;
      end;
    end;
  end;
end;

procedure TfrmHelpGenerator.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  SaveChanges(Action);
  if Action <> caNone then
  begin
    DefaultDirectives.Free;
  end;
end;

procedure TfrmHelpGenerator.New1Click(Sender: TObject);
var
  Action: TCloseAction;
begin
  Action := caHide;
  if Changed then
  begin
    SaveChanges(Action);
    if Action = caNone then
      Exit;
  end;

  SetDefaults;

  SaveDialog1.FileName := '';
  edProjectName.Text := '';
  edTitle.Text := '';
  edOutput.Text := '';
  seVerbosity.Value := 2;
  comboGenerateFormat.ItemIndex := 0;
  memoFiles.Clear;
  memoIncludeDirectories.Clear;
  memoMessages.Clear;
  rgLineBreakQuality.ItemIndex := 0;

  memoDefines.Lines.Assign(DefaultDirectives);

  Changed := False;
end;

procedure TfrmHelpGenerator.btnIntroductionClick(Sender: TObject);
begin
  if edIntroduction.Text <> '' then
  begin
    odExtraFiles.FileName := edIntroduction.Text;
  end;
  if odExtraFiles.Execute then
  begin
    edIntroduction.Text := odExtraFiles.FileName;
    Changed := True;
  end;
end;

procedure TfrmHelpGenerator.btnConclusionClick(Sender: TObject);
begin
  if edConclusion.Text <> '' then
  begin
    odExtraFiles.FileName := edConclusion.Text;
  end;
  if odExtraFiles.Execute then
  begin
    edConclusion.Text := odExtraFiles.FileName;
    Changed := True;
  end;
end;

procedure TfrmHelpGenerator.cbUseGraphVizClick(Sender: TObject);
begin
  Changed := True;
  edGraphVizDotLocation.Enabled := cbUseGraphVizClasses.Checked or
    cbUseGraphVizUses.Checked;
  btnVizGraph.Enabled := edGraphVizDotLocation.Enabled;
  SetEdVizGraphDotLocationColor;
end;

procedure TfrmHelpGenerator.btnVizGraphClick(Sender: TObject);
begin
  if edGraphVizDotLocation.Text <> '' then
  begin
    odDotLocation.FileName := edGraphVizDotLocation.Text;
  end;
  if odDotLocation.Execute then
  begin
    edGraphVizDotLocation.Text := odDotLocation.FileName;
    Changed := True;
    SetEdVizGraphDotLocationColor;
  end;
end;

procedure TfrmHelpGenerator.About1Click(Sender: TObject);
begin
  frmAbout.ShowModal;
end;

procedure TfrmHelpGenerator.Help2Click(Sender: TObject);
begin
  Application.HelpSystem.ShowTopicHelp(HelpKeyWord, HelpKeyWord);
end;

procedure TfrmHelpGenerator.pcMainChanging(Sender: TObject;
  var AllowChange: Boolean);
begin
  AllowChange := btnGenerate.Enabled;
end;

procedure TfrmHelpGenerator.comboGenerateFormatChange(Sender: TObject);
begin
  Changed := True;
  memoHeader.Enabled := comboGenerateFormat.ItemIndex in [0, 1];
  memoFooter.Enabled := memoHeader.Enabled;
  if memoHeader.Enabled then
  begin
    memoHeader.Color := clWindow;
    memoFooter.Color := clWindow;
  end
  else
  begin
    memoHeader.Color := clBtnFace;
    memoFooter.Color := clBtnFace;
  end;

  tabWebPage.TabVisible := comboGenerateFormat.ItemIndex in [0, 1];

  rgLineBreakQuality.Enabled := (comboGenerateFormat.ItemIndex in [2, 3]);
  memoHyphenatedWords.Enabled := rgLineBreakQuality.Enabled;
  comboLatexGraphics.Enabled := rgLineBreakQuality.Enabled;
  if memoHyphenatedWords.Enabled then
  begin
    memoHyphenatedWords.Color := clWindow;
  end
  else
  begin
    memoHyphenatedWords.Color := clBtnFace;
  end;
  comboLatexGraphics.Color := memoHyphenatedWords.Color;
end;

procedure TfrmHelpGenerator.FormDestroy(Sender: TObject);
begin
  WriteIniFile(T_VCL_Ini);
end;

procedure TfrmHelpGenerator.SetEdVizGraphDotLocationColor;
begin
  if edGraphVizDotLocation.Enabled then
  begin
    if FileExists(edGraphVizDotLocation.Text) then
    begin
      edGraphVizDotLocation.Color := clWindow;
    end
    else
    begin
      edGraphVizDotLocation.Color := clRed;
    end;
  end
  else
  begin
    edGraphVizDotLocation.Color := clBtnFace;
  end;
end;

procedure TfrmHelpGenerator.edGraphVizDotLocationChange(Sender: TObject);
begin
  Changed := True;
  SetEdVizGraphDotLocationColor;
end;

procedure TfrmHelpGenerator.Save1Click(Sender: TObject);
begin
  SaveIt;
end;

procedure TfrmHelpGenerator.pcMainChange(Sender: TObject);
begin
  HelpKeyword := pcMain.ActivePage.HelpKeyword;
end;

procedure TfrmHelpGenerator.WebBrowser1NavigateComplete2(Sender: TObject;
  const pDisp: IDispatch; var URL: OleVariant);
begin
  lblURL.Caption := WebBrowser1.LocationURL;
end;

procedure TfrmHelpGenerator.sbForwardClick(Sender: TObject);
begin
  WebBrowser1.GoForward;
end;

procedure TfrmHelpGenerator.sbBackClick(Sender: TObject);
begin
  WebBrowser1.GoBack;
end;

procedure TfrmHelpGenerator.WebBrowser1CommandStateChange(Sender: TObject;
  Command: Integer; Enable: WordBool);
begin
  if Command = 1 then
  begin
    sbForward.Enabled := Enable;
  end
  else if Command = 2 then
  begin
    sbBack.Enabled := Enable;
  end;
end;

{ THelpGeneratorProjectOptions }

function THelpGeneratorProjectOptions.GetChanged: boolean;
begin
  result := frmHelpGenerator.Changed;
end;

function THelpGeneratorProjectOptions.GetConclusion: string;
begin
  if csWriting in ComponentState then
  begin
    result :=
      RelativeFileName(frmHelpGenerator.edConclusion.Text);
  end
  else
  begin
    result := frmHelpGenerator.edConclusion.Text;
  end;
end;

function THelpGeneratorProjectOptions.GetDirectives: TSTrings;
begin
  result := frmHelpGenerator.memoDefines.Lines;
end;

function THelpGeneratorProjectOptions.GetFooter: TStrings;
begin
  result := frmHelpGenerator.memoFooter.Lines;
end;

function THelpGeneratorProjectOptions.GetGraphVizDotLocation: string;
begin
  result := frmHelpGenerator.edGraphVizDotLocation.Text;
end;

function THelpGeneratorProjectOptions.GetHeader: TStrings;
begin
  result := frmHelpGenerator.memoFooter.Lines;
end;

function THelpGeneratorProjectOptions.GetHtmlDocGeneratorComponent:
  THtmlDocGenerator;
begin
  result := frmHelpGenerator.HtmlDocGenerator;
end;

function THelpGeneratorProjectOptions.GetHTMLHelpDocGeneratorComponent:
  THTMLHelpDocGenerator;
begin
  result := frmHelpGenerator.HTMLHelpDocGenerator;
end;

function THelpGeneratorProjectOptions.GetHyphenatedWords: TStrings;
begin
  result := frmHelpGenerator.memoHyphenatedWords.Lines;
end;

function THelpGeneratorProjectOptions.GetIncludeAutomated: boolean;
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kAutomated);
  result := frmHelpGenerator.clbMethodVisibility.Checked[Index];
end;

function THelpGeneratorProjectOptions.GetIncludeDirectories: TStrings;
var
  Index: integer;
begin
  if csWriting in ComponentState then
  begin
    FSourceFiles.Assign(frmHelpGenerator.memoIncludeDirectories.Lines);
    for Index := 0 to FSourceFiles.Count - 1 do
    begin
      FSourceFiles[Index] := RelativeFileName(FSourceFiles[Index]);
    end;
    result := FSourceFiles;
  end
  else
  begin
    result := frmHelpGenerator.memoIncludeDirectories.Lines;
  end;
end;

function THelpGeneratorProjectOptions.GetIncludeImplicit: boolean;
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kImplicit);
  result := frmHelpGenerator.clbMethodVisibility.Checked[Index];
end;

function THelpGeneratorProjectOptions.GetIncludePrivate: boolean;
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kPrivate);
  result := frmHelpGenerator.clbMethodVisibility.Checked[Index];
end;

function THelpGeneratorProjectOptions.GetIncludeProtected: boolean;
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kProtected);
  result := frmHelpGenerator.clbMethodVisibility.Checked[Index];
end;

function THelpGeneratorProjectOptions.GetIncludePublic: boolean;
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kPublic);
  result := frmHelpGenerator.clbMethodVisibility.Checked[Index];
end;

function THelpGeneratorProjectOptions.GetIncludePublished: boolean;
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kPublished);
  result := frmHelpGenerator.clbMethodVisibility.Checked[Index];
end;

function THelpGeneratorProjectOptions.GetIncludeStrictPrivate: boolean;
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kStrictPrivate);
  result := frmHelpGenerator.clbMethodVisibility.Checked[Index];
end;

function THelpGeneratorProjectOptions.GetIncludeStrictProtected: boolean;
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kStrictPrivate);
  result := frmHelpGenerator.clbMethodVisibility.Checked[Index];
end;

function THelpGeneratorProjectOptions.GetIntroduction: string;
begin
  if csWriting in ComponentState then
  begin
    result :=
      RelativeFileName(frmHelpGenerator.edIntroduction.Text);
  end
  else
  begin
    result := frmHelpGenerator.edIntroduction.Text;
  end;
end;

function THelpGeneratorProjectOptions.GetLanguage: TLanguageID;
begin
  result := TLanguageID(frmHelpGenerator.comboLanguages.ItemIndex);
end;

function THelpGeneratorProjectOptions.GetLatexGraphicsPackage:
  TLatexGraphicsPackage;
begin
  result :=
    TLatexGraphicsPackage(frmHelpGenerator.comboLatexGraphics.ItemIndex);
end;

function THelpGeneratorProjectOptions.GetLineBreakQuality: TLineBreakQuality;
begin
  result := TLineBreakQuality(frmHelpGenerator.rgLineBreakQuality.ItemIndex);
end;

function THelpGeneratorProjectOptions.GetOutputDirectory: string;
begin
  if csWriting in ComponentState then
  begin
    result :=
      RelativeFileName(frmHelpGenerator.edOutput.Text);
  end
  else
  begin
    result := frmHelpGenerator.edOutput.Text;
  end;
end;

function THelpGeneratorProjectOptions.GetOutputType: TOutputType;
begin
  result := TOutputType(frmHelpGenerator.comboGenerateFormat.ItemIndex);
end;

function THelpGeneratorProjectOptions.GetPasDocComponent: TPasDoc;
begin
  result := frmHelpGenerator.PasDoc1;
end;

function THelpGeneratorProjectOptions.GetProjectName: string;
begin
  result := frmHelpGenerator.edProjectName.Text;
end;

function THelpGeneratorProjectOptions.GetSourceFiles: TStrings;
var
  Index: integer;
begin
  if csWriting in ComponentState then
  begin
    FSourceFiles.Assign(frmHelpGenerator.memoFiles.Lines);
    for Index := 0 to FSourceFiles.Count - 1 do
    begin
      FSourceFiles[Index] := RelativeFileName(FSourceFiles[Index]);
    end;
    result := FSourceFiles;
  end
  else
  begin
    result := frmHelpGenerator.memoFiles.Lines;
  end;
end;

function THelpGeneratorProjectOptions.GetTexDocGeneratorComponent:
  TTexDocGenerator;
begin
  result := frmHelpGenerator.TexDocGenerator;
end;

function THelpGeneratorProjectOptions.GetTitle: string;
begin
  result := frmHelpGenerator.edTitle.Text;
end;

function THelpGeneratorProjectOptions.GetUseGraphVizClasses: boolean;
begin
  result := frmHelpGenerator.cbUseGraphVizClasses.Checked;
end;

function THelpGeneratorProjectOptions.GetUseGraphVizUses: boolean;
begin
  result := frmHelpGenerator.cbUseGraphVizUses.Checked;
end;

function THelpGeneratorProjectOptions.GetVerbosity: integer;
begin
  result := frmHelpGenerator.seVerbosity.Value;
end;

procedure THelpGeneratorProjectOptions.SetChanged(const Value: boolean);
begin
  frmHelpGenerator.Changed := Value;
end;

procedure THelpGeneratorProjectOptions.SetConclusion(
  const Value: string);
begin
  frmHelpGenerator.edConclusion.Text := Value;
end;

procedure THelpGeneratorProjectOptions.SetDefaultActivePage;
begin
  frmHelpGenerator.pcMain.ActivePageIndex := 0;
end;

procedure THelpGeneratorProjectOptions.SetDirectives(
  const Value: TSTrings);
begin
  frmHelpGenerator.memoDefines.Lines.Assign(Value);
end;

procedure THelpGeneratorProjectOptions.SetFooter(const Value: TStrings);
begin
  frmHelpGenerator.memoFooter.Lines := Value;
end;

procedure THelpGeneratorProjectOptions.SetGraphVizDotLocation(
  const Value: string);
begin
  if Value <> '' then
  begin
    frmHelpGenerator.edGraphVizDotLocation.Text := Value;
  end;
end;

procedure THelpGeneratorProjectOptions.SetHeader(const Value: TStrings);
begin
  frmHelpGenerator.memoHeader.Lines := Value;
end;

procedure THelpGeneratorProjectOptions.SetHyphenatedWords(
  const Value: TStrings);
begin
  frmHelpGenerator.memoHyphenatedWords.Lines := Value;
end;

procedure THelpGeneratorProjectOptions.SetIncludeAutomated(
  const Value: boolean);
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kAutomated);
  frmHelpGenerator.clbMethodVisibility.Checked[Index] := Value;
  frmHelpGenerator.clbMethodVisibilityClickCheck(nil);
end;

procedure THelpGeneratorProjectOptions.SetIncludeDirectories(
  const Value: TStrings);
begin
  frmHelpGenerator.memoIncludeDirectories.Lines := Value;
end;

procedure THelpGeneratorProjectOptions.SetIncludeImplicit(
  const Value: boolean);
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kImplicit);
  frmHelpGenerator.clbMethodVisibility.Checked[Index] := Value;
  frmHelpGenerator.clbMethodVisibilityClickCheck(nil);
end;

procedure THelpGeneratorProjectOptions.SetIncludePrivate(
  const Value: boolean);
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kPrivate);
  frmHelpGenerator.clbMethodVisibility.Checked[Index] := Value;
  frmHelpGenerator.clbMethodVisibilityClickCheck(nil);
end;

procedure THelpGeneratorProjectOptions.SetIncludeProtected(
  const Value: boolean);
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kProtected);
  frmHelpGenerator.clbMethodVisibility.Checked[Index] := Value;
  frmHelpGenerator.clbMethodVisibilityClickCheck(nil);
end;

procedure THelpGeneratorProjectOptions.SetIncludePublic(
  const Value: boolean);
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kPublic);
  frmHelpGenerator.clbMethodVisibility.Checked[Index] := Value;
  frmHelpGenerator.clbMethodVisibilityClickCheck(nil);
end;

procedure THelpGeneratorProjectOptions.SetIncludePublished(
  const Value: boolean);
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kPublished);
  frmHelpGenerator.clbMethodVisibility.Checked[Index] := Value;
  frmHelpGenerator.clbMethodVisibilityClickCheck(nil);
end;

procedure THelpGeneratorProjectOptions.SetIncludeStrictPrivate(
  const Value: boolean);
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kStrictPrivate);
  frmHelpGenerator.clbMethodVisibility.Checked[Index] := Value;
  frmHelpGenerator.clbMethodVisibilityClickCheck(nil);
end;

procedure THelpGeneratorProjectOptions.SetIncludeStrictProtected(
  const Value: boolean);
var
  Index: integer;
begin
  Index := frmHelpGenerator.clbMethodVisibility.Items.IndexOf(kStrictProtected);
  frmHelpGenerator.clbMethodVisibility.Checked[Index] := Value;
  frmHelpGenerator.clbMethodVisibilityClickCheck(nil);
end;

procedure THelpGeneratorProjectOptions.SetIntroduction(
  const Value: string);
begin
  frmHelpGenerator.edIntroduction.Text := Value;
end;

procedure THelpGeneratorProjectOptions.SetLanguage(
  const Value: TLanguageID);
begin
  frmHelpGenerator.comboLanguages.ItemIndex := Ord(Value);
  frmHelpGenerator.comboLanguagesChange(nil);
end;

procedure THelpGeneratorProjectOptions.SetLatexGraphicsPackage(
  const Value: TLatexGraphicsPackage);
begin
  frmHelpGenerator.comboLatexGraphics.ItemIndex := Ord(Value);
end;

procedure THelpGeneratorProjectOptions.SetLineBreakQuality(
  const Value: TLineBreakQuality);
begin
  frmHelpGenerator.rgLineBreakQuality.ItemIndex := Ord(Value);
end;

procedure THelpGeneratorProjectOptions.SetOutputDirectory(
  const Value: string);
begin
  frmHelpGenerator.edOutput.Text := Value;
end;

procedure THelpGeneratorProjectOptions.SetOutputType(const Value:
  TOutputType);
begin
  frmHelpGenerator.comboGenerateFormat.ItemIndex := Ord(Value);
  frmHelpGenerator.comboGenerateFormatChange(nil);
end;

procedure THelpGeneratorProjectOptions.SetProjectName(const Value: string);
begin
  frmHelpGenerator.edProjectName.Text := Value;
end;

procedure THelpGeneratorProjectOptions.SetSourceFiles(
  const Value: TStrings);
begin
  frmHelpGenerator.memoFiles.Lines := Value;
end;

procedure THelpGeneratorProjectOptions.SetTitle(const Value: string);
begin
  frmHelpGenerator.edTitle.Text := Value;
end;

procedure THelpGeneratorProjectOptions.SetUseGraphVizClasses(
  const Value: boolean);
begin
  frmHelpGenerator.cbUseGraphVizClasses.Checked := Value;
end;

procedure THelpGeneratorProjectOptions.SetUseGraphVizUses(
  const Value: boolean);
begin
  frmHelpGenerator.cbUseGraphVizUses.Checked := Value;
end;

procedure THelpGeneratorProjectOptions.SetVerbosity(const Value: integer);
begin
  frmHelpGenerator.seVerbosity.Value := Value;
end;

{ T_VCL_Ini }

function T_VCL_Ini.GetBrowserLocation: string;
begin
  result := frmHelpGenerator.edBrowser.Text;
end;

function T_VCL_Ini.GetGraphVizDotLocation: string;
begin
  result := frmHelpGenerator.edGraphVizDotLocation.Text;
end;

function T_VCL_Ini.GetPasDocConsoleLocation: string;
begin
  result := FPasDocConsoleLocation;
end;

procedure T_VCL_Ini.SetBrowserLocation(const Value: string);
begin
  frmHelpGenerator.edBrowser.Text := Value;
end;

procedure T_VCL_Ini.SetGraphVizDotLocation(const Value: string);
begin
  frmHelpGenerator.edGraphVizDotLocation.Text := Value;
end;

procedure TfrmHelpGenerator.Button1Click(Sender: TObject);
begin
  if BrowserDialog.Execute then
  begin
    edBrowser.Text := BrowserDialog.FileName;
  end;
end;

procedure TfrmHelpGenerator.ShowTextMessage(const AString: string);
begin
  memoMessages.Lines.Add(AString);
  Application.ProcessMessages;
end;

procedure T_VCL_Ini.SetPasDocConsoleLocation(const Value: string);
begin
  FPasDocConsoleLocation := Value;
end;

initialization
  RegisterClass(THelpGeneratorProjectOptions);
  RegisterClass(T_VCL_Ini);
end.
